name: Pull Request Check - Dev

on:
  workflow_dispatch:  # allows manual triggering
  pull_request:
    branches:
      - development

jobs:
  run-changed-r:
    runs-on: ubuntu-latest

    container:
      image: rocker/geospatial:latest
      options: --user root  # needed to write to /home

    steps:
    - name: Set up jovyan user
      run: |
        useradd -m -s /bin/bash jovyan
        chown -R jovyan:jovyan /__w
      shell: bash
      
    - name: Install system dependencies
      run: |
        apt-get update && apt-get install -y \
        libssl-dev \
        libcurl4-openssl-dev \
        libxml2-dev \
        libgit2-dev \
        git \
        ca-certificates \
        jq \
        curl \
        gnupg \
        lsb-release \
        apt-transport-https \
        unzip

    - name: Install Azure CLI
      run: |
        curl -sL https://aka.ms/InstallAzureCLIDeb | bash
        
    - name: Install AzCopy
      run: |
        curl -sL https://aka.ms/downloadazcopy-v10-linux | tar -xz
        cp ./azcopy_linux_amd64_*/azcopy /usr/local/bin/
        chmod +x /usr/local/bin/azcopy
        azcopy --version

    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Log in to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_SP }}
        
    - name: Configure AzCopy using Service Principal
      env:
        AZURE_SP_JSON: ${{ secrets.AZURE_SP }}
      run: |
        CLIENT_ID=$(printf '%s' "$AZURE_SP_JSON" | jq -r .clientId)
        CLIENT_SECRET=$(printf '%s' "$AZURE_SP_JSON" | jq -r .clientSecret)
        TENANT_ID=$(printf '%s' "$AZURE_SP_JSON" | jq -r .tenantId)

        export AZCOPY_AUTO_LOGIN_TYPE=SPN
        export AZCOPY_SPA_CLIENT_ID="$CLIENT_ID"
        export AZCOPY_SPA_CLIENT_SECRET="$CLIENT_SECRET"
        export AZCOPY_TENANT_ID="$TENANT_ID"

        # Login AzCopy with SPN
        azcopy login --service-principal

        # verify auth (prints account name or success info)
        azcopy login --check || true

    - name: Create data directory
      run: mkdir -p /home/jovyan/carob-eia/data/raw/eia

    # - name: Download source data from Azure Blob
    #   run: |
    #     az storage blob download-batch \
    #       --account-name kapi \
    #       --destination /home/jovyan/carob-eia/data/raw/eia \
    #       --source eia-carob-raw \
    #       --auth-mode login
    # - name: Download source data from Azure Blob
    #   run: |
    #     SRC_CONTAINER="eia-carob-raw"
    #     DEST_ROOT="/home/jovyan/carob-eia/data/raw/eia"
    #     ACCOUNT="kapi"
    # 
    #     mkdir -p "/home/jovyan/carob-eia/data/raw/eia"
    # 
    #     echo "Listing blobs..."
    #     BLOBS=$(az storage blob list \
    #       --account-name "kapi" \
    #       --container-name "eia-carob-raw" \
    #       --auth-mode login \
    #       --query "[].name" -o tsv)
    # 
    #     echo "Found blobs:"
    #     echo "$BLOBS"
    # 
    #     if [ -z "$BLOBS" ]; then
    #       echo "No blobs found (container empty?)"
    #       exit 0
    #     fi
    # 
    #     while IFS= read -r blob; do
    #       # preserve virtual folders in blob name
    #       dest="/home/jovyan/carob-eia/data/raw/eia/$blob"
    #       destdir=$(dirname "$dest")
    #       mkdir -p "$destdir"
    #       echo "Downloading blob: $blob -> $dest"
    #       az storage blob download \
    #         --account-name "kapi" \
    #         --container-name "eia-carob-raw" \
    #         --name "$blob" \
    #         --file "$dest" \
    #         --auth-mode login
    #     done <<< "$BLOBS"
    - name: Download source data from Azure Blob with AzCopy
      run: |
        SRC_ACCOUNT="kapi"
        SRC_CONTAINER="eia-carob-raw"
        DEST="/home/jovyan/carob-eia/data/raw/eia"
        echo "Starting azcopy from https://$SRC_ACCOUNT.blob.core.windows.net/$SRC_CONTAINER"
        azcopy copy "https://$SRC_ACCOUNT.blob.core.windows.net/$SRC_CONTAINER" "$DEST" --recursive=true

    - name: Install remotes package
      run: Rscript -e 'install.packages("remotes")'

    - name: Install carobiner package from GitHub
      env:
        GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
      run: Rscript -e 'remotes::install_github("reagro/carobiner")'
      
    # - name: Get changed R files
    #   id: changed
    #   run: |
    #     cd /__w/eia-carob/eia-carob
    #     git config --global --add safe.directory /__w/eia-carob/eia-carob
    #     git fetch origin
    #     CHANGED_FILES=$(git diff --name-only origin/development...HEAD | grep '\.R$' || true)
    #     echo "Changed files: $CHANGED_FILES"
    #     echo "changed_files=$CHANGED_FILES" >> $GITHUB_OUTPUT
    #   working-directory: ${{ github.workspace }}

    - name: Get modified scripts and run review
      id: review
      # if: steps.changed.outputs.changed_files != ''
      run: |
        LOGFILE=pr-review.txt
        echo "" > $LOGFILE
        cd /__w/eia-carob/eia-carob
        git config --global --add safe.directory /__w/eia-carob/eia-carob
        git fetch origin
        CHANGED_FILES=$(git diff --name-only origin/development...HEAD | grep '\.R$' || true)
        for file in $CHANGED_FILES; do
          echo "Running changed file: $file \n"
          echo "Outputs from running: $file \n" >> $LOGFILE
          su - jovyan bash -c "cd /__w/eia-carob/eia-carob && Rscript -e 'path <- getwd(); source(\"$file\"); out <- capture.output(carob_script(path)); cat(out, sep = \"\\n\")'" >> $LOGFILE 2>&1
        done
        echo "REVIEW_LOG<<EOF" >> $GITHUB_OUTPUT
        cat $LOGFILE >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Add comments to PR
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `\`\`\`${{ steps.review.outputs.REVIEW_LOG }}\`\`\``;
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: "### ðŸ§ª Review of R scripts:\n" + output + "\n*This message is generated automatically. Please review the PR before merging.*\n"
          });
